generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id          String    @id @default(cuid())
  name        String?
  username    String    @unique @map("username_lowercase")
  email       String?   @unique
  bio         String?   @unique
  githubId    String?   @unique
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  accounts    Account[]
  sessions    Session[]
  projects    Project[]
  badges      Badge[]
  supports    Support[]
  discussions Discussion[]
  followers   Follow[] @relation("followers")
  following   Follow[] @relation("following")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  githubUrl   String
  likes              Int      @default(0)
  dislikes           Int      @default(0)
  mostPopularLanguage String
  lastUpdated         DateTime
  image       String?
  stars       Int           @default(0)
  views               Int   @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  supports    Support[]
  discussions Discussion[]
}

model Support {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Discussion {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  follower    User     @relation("followers", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}
